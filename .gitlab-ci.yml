stages:
  - mirror
  - test-ssh

test_ssh:
  stage: test-ssh
  before_script:
    - apk update && apk add --no-cache openssh sshpass
    - mkdir -p ~/.ssh

    # Set environment-specific variables
    - if [ "$CI_COMMIT_BRANCH" = "dev-revospring" ]; then
        export HOST_PRIVATE_KEY_B64="$DEV_HOST_PRIVATE_KEY_B64";
        export HOST_SSH_PASSPHRASE="$DEV_HOST_SSH_PASSPHRASE";
        export VPS_USER="$DEV_VPS_USER";
        export HOST_URL="$DEV_HOST_URL";
      elif [ "$CI_COMMIT_BRANCH" = "revospring" ]; then
        export HOST_PRIVATE_KEY_B64="$PROD_HOST_PRIVATE_KEY_B64";
        export HOST_SSH_PASSPHRASE="$PROD_HOST_SSH_PASSPHRASE";
        export VPS_USER="$PROD_VPS_USER";
        export HOST_URL="$PROD_HOST_URL";
      else
        echo "Unknown environment. Skipping test.";
        exit 1;
      fi

    # Decode the private key
    - echo "$HOST_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Add the VPS host to known_hosts
    - ssh-keyscan -H "$HOST_URL" >> ~/.ssh/known_hosts

    # Start ssh-agent and add the private key
    - eval $(ssh-agent -s)
    - echo "$HOST_SSH_PASSPHRASE" | ssh-add ~/.ssh/id_rsa

  script:
    - echo "Testing SSH connection..."
    - ssh "$VPS_USER@$HOST_URL" "echo 'SSH connection successful'"



mirror-repository:
  stage: mirror
  image: alpine:latest
  before_script:
    - apk add --no-cache git

    # Configure Git with HTTPS credentials
    - git config --global user.name "${GIT_USER_NAME}"
    - git config --global user.email "${GIT_USER_EMAIL}"

    # Construct authenticated destination repository URL at runtime
    - export AUTHENTICATED_DESTINATION_REPO="https://${GIT_USER}:${GIT_PAT}@${DESTINATION_REPOSITORY}"
    
  script:
    - echo "Cloning repository from source..."
    - git clone --mirror "$SOURCE_REPOSITORY" repo_mirror
    - cd repo_mirror
    - echo "Updating remote origin..."
    - git remote remove origin
    - git remote add origin "$AUTHENTICATED_DESTINATION_REPO"

    # Print the constructed repo URL (masking the PAT for security)
    - echo "AUTHENTICATED_DESTINATION_REPO (masked):https://${GIT_USER}:*****@${DESTINATION_REPOSITORY}"

    - echo "Pushing updates to GitLab..."
    - git push --all --force
    - git push --tags --force
    
  only:
    - schedules
